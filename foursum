class Solution {
public:
    vector<vector<int>> fourSum(vector<int>& nums, int target) {
        int n = nums.size();
        set<vector<int>> uniq; // to avoid duplicates
        sort(nums.begin(),
             nums.end()); // optional, but helps with duplicate handling

        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                unordered_map<int, int> mpp; // reset for each (i, j)

                for (int k = j + 1; k < n; k++) {
                    long long fourth =
                        (long long)target - nums[i] - nums[j] - nums[k];
                    if (mpp.find(fourth) != mpp.end()) {
                        vector<int> quad = {nums[i], nums[j], nums[k],
                                            (int)fourth};
                        sort(quad.begin(), quad.end());
                        uniq.insert(quad);
                    }
                    mpp[nums[k]] = k;
                }
            }
        }

        return vector<vector<int>>(uniq.begin(), uniq.end());
    }
};
//optimal
class Solution {
public:
    vector<vector<int>> fourSum(vector<int>& nums, int target) {
        vector<vector<int>> res;
        int n = nums.size();
        sort(nums.begin(), nums.end());

        for (int i = 0; i < n; i++) {
            // Avoid duplicate i
            if (i > 0 && nums[i] == nums[i - 1])
                continue;

            for (int j = i + 1; j < n; j++) {
                // Avoid duplicate j
                if (j > i + 1 && nums[j] == nums[j - 1])
                    continue;

                long long target2 = (long long)target - nums[i] - nums[j];
                int left = j + 1;
                int right = n - 1;

                while (left < right) {
                    long long twoSum = nums[left] + nums[right];
                    if (twoSum < target2) {
                        left++;
                    } else if (twoSum > target2) {
                        right--;
                    } else {
                        res.push_back(
                            {nums[i], nums[j], nums[left], nums[right]});

                        // Skip duplicates for left
                        while (left < right && nums[left] == nums[left + 1])
                            left++;
                        // Skip duplicates for right
                        while (left < right && nums[right] == nums[right - 1])
                            right--;

                        left++;
                        right--;
                    }
                }
            }
        }

        return res;
    }
};

